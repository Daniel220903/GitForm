@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
<!DOCTYPE html>
<html>
<head>
    
    <title>Create template</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" type="text/css" href="~/css/Template/try.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
</head>
<body>
    <div class="container">

        <div class="login-content">
            <div style="width: 100%;">
                <h1>@Localizer["Create quiz"]:</h1>
                <div class="input-div one">
                    <div class="i">
                        <i class="fas fa-user"></i>
                    </div>
                    <div class="div">
                        <h5>@Localizer["Title of the quiz"]:</h5>
                        <input type="text" name="title" id="template-title" class="input">
                    </div>
                </div>

                <div class="input-div one div-dropzone">
                    <div class="i">
                        <i class="fas fa-user"></i>
                    </div>
                    <div class="div">
                        <h5>@Localizer["Image"]:</h5>
                        <div class="dropzone mx-auto" id="profilePictureDropzone" style="display: block;"></div>
                    </div>
                </div>


                <div class="input-div one">
                    <div class="i">
                        <i class="fas fa-lock"></i>
                    </div>
                    <div class="div">
                        <h5>@Localizer["Theme"]:</h5>
                        <input type="text" id="template-topic" name="topic" class="input">
                    </div>
                </div>

                <div class="input-div one">
                    <label for="template-description"></label>
                    <textarea id="template-description" placeholder="@Localizer["Write a description for the form..."]" rows="3"></textarea>
                </div>

                <div>
                    <label>
                        <input type="checkbox" id="template-public" checked>
                        @Localizer["Make public"]
                    </label>
                </div>
                <br />

                <table id="user-table" class="user-table" style="display: none;">
                    <thead>
                        <tr>
                            <th>@Localizer["Select"]</th>
                            <th>Email</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>

                <div id="quests-container"></div>

                <button id="add-quest" class="btn add-quest">
                    <i class="fas fa-plus"></i>
                </button>
                <button id="create-template" class="btn">@Localizer["Create quiz"]</button>
            </div>
        </div>
    </div>
    <script>
        const maxNumberQuest = "@Localizer["You have reached the maximum of 50 questions."]";
        const selectOption = "@Localizer["Select an option"]";
        const Question = "@Localizer["Question"]";
        const writeYourQuestion = "@Localizer["Write your question..."]";
        const questionType = "@Localizer["Question Type"]";
        const multipleChoice = "@Localizer["Multiple Choice"]";
        const trueFalse = "@Localizer["True/False"]";
        const openQuest = "@Localizer["Open-ended answer"]";
        const deleteQuestion = "@Localizer["Delete Question"]";
        const options4 = "@Localizer["Options (maximum 4)"]";
        const addOption = "@Localizer["Add Option"]";
        const True = "@Localizer["True"]";
        const False = "@Localizer["False"]";
        const expectedAnswer = "@Localizer["Expected answer"]";
        const max4options = "@Localizer["You can only add a maximum of 4 options."]";
        const templateCreated = "@Localizer["Template created successfully."]";

        let questCount = 0;
        let uploadedImageUrl = "";

        const updateQuestIndices = () => {
            $("#quests-container .quest").each(function (index) {
                $(this).find(".quest-index").text(`${Question} ${index + 1}`);
            });
        };

        const createQuest = () => {
            if (questCount >= 50) {
                alert(maxNumberQuest);
                return;
            }

            questCount++;

            const questHtml = `
                    <div class="quest" id="quest-${questCount}">
                        <div class="quest-index">${Question} ${questCount}</div>
                        <label>${Question}:</label>
                        <input type="text" class="quest-title" placeholder="${writeYourQuestion}" style="width: 100%; margin-bottom: 10px;">

                        <label>${questionType}:</label>
                        <select class="quest-type" style="width: 100%; margin-bottom: 10px;">
                            <option value="" selected disabled> ${selectOption}</option>
                            <option value="multiple-choice">${multipleChoice}</option>
                            <option value="true-false">${trueFalse}</option>
                            <option value="open">${openQuest}</option>
                        </select>

                        <div class="options-container" style="display: none;"></div>
                        <button class="remove-quest">${deleteQuestion}</button>
                    </div>
                `;

            $("#quests-container").append(questHtml);
            updateQuestIndices();
        };

        $(document).on("change", ".quest-type", function () {
            const questDiv = $(this).closest(".quest");
            const type = $(this).val();
            const optionsContainer = questDiv.find(".options-container");

            optionsContainer.empty();

            if (type === "multiple-choice") {
                console.log('SE TRADUCE??', questionType);
                optionsContainer.append(`
                        <label>${options4}:</label>
                        <div class="multiple-options">
                            <input type="text" class="option">
                            <input type="radio" name="correct-${questCount}" class="correct-answer-selector">
                            <i class="fas fa-check-circle correct-icon palomita"></i>
                        </div>
                        <button class="add-option">${addOption}</button>
                    `);
            } else if (type === "true-false") {
                optionsContainer.append(`
                        <div>
                            <input type="radio" name="correct-${questCount}" value="Cierto" class="correct-answer-selector"> ${True}
                            <input type="radio" name="correct-${questCount}" value="Falso" class="correct-answer-selector"> ${False}
                        </div>
                    `);
            } else if (type === "open") {
                optionsContainer.append(`
                        <label>${expectedAnswer}:</label>
                        <input type="text" class="expected-answer" placeholder="${expectedAnswer}...">
                    `);
            }

            optionsContainer.show();
        });

        $(document).on("click", ".add-option", function () {
            const optionsDiv = $(this).siblings(".multiple-options");

            if (optionsDiv.find(".option").length >= 4) {
                alert(max4options);
                return;
            }

            optionsDiv.append(`
                    <div class="option-container">
                        <input type="text" class="option" placeholder="Nueva opción">
                        <input type="radio" name="correct-${questCount}" class="correct-answer-selector">
                        <i class="fas fa-check-circle correct-icon palomita"></i>
                    </div>
                `);
        });

        $(document).on("click", ".remove-quest", function () {
            $(this).closest(".quest").remove();
            questCount--;
            updateQuestIndices();
        });

        const gatherTemplateData = () => {
            const title = $("#template-title").val();
            const topic = $("#template-topic").val();
            const description = $("#template-description").val();
            const isPublic = $("#template-public").is(":checked");
            const quests = [];
            const selectedUsers = [];

            $(".quest").each(function () {
                const questTitle = $(this).find(".quest-title").val();
                const questType = $(this).find(".quest-type").val();
                let correctAnswer = null;
                let options = null;
                let expectedAnswer = null;

                if (questType === "multiple-choice") {
                    options = [];
                    $(this).find(".multiple-options .option").each(function () {
                        options.push($(this).val());
                    });
                    correctAnswer = $(this).find(".multiple-options input.correct-answer-selector:checked").siblings(".option").val();
                } else if (questType === "true-false") {
                    correctAnswer = $(this).find(".correct-answer-selector:checked").val();
                    expectedAnswer = correctAnswer;
                } else if (questType === "open") {
                    expectedAnswer = $(this).find(".expected-answer").val();
                }

                quests.push({
                    title: questTitle,
                    type: questType,
                    options,
                    correctAnswer,
                    expectedAnswer,
                });
            });

            $("#user-table tbody input[type='checkbox']:checked").each(function () {
                selectedUsers.push($(this).val());
            });

            return { title, topic, description, isPublic, quests, selectedUsers };
        };

        $("#create-template").click(async () => {
            const templateData = gatherTemplateData();
            templateData.picture = uploadedImageUrl;
            console.log("Datos enviados al backend:", JSON.stringify(templateData, null, 2));

            try {
                const response = await fetch("/api/Template/CreateTemplate", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify(templateData),
                });

                if (response.ok) {
                    const result = await response.json();
                    alert(templateCreated);
                    window.location.href = "/Home/Index";
                } else {
                    alert("Error al crear la plantilla. Por favor, intenta nuevamente.");
                }
            } catch (error) {
                console.error("Error al enviar los datos:", error);
                alert("Hubo un problema al enviar los datos al servidor.");
            }
        });

        $("#save-and-exit").click(() => {
            alert("Guardado y saliendo...");
        });

        $("#add-quest").click(createQuest);

        const loadUsers = async () => {
            try {
                const response = await fetch('Template/getUsers');
                if (!response.ok) {
                    throw new Error('Error al cargar usuarios');
                }
                const users = await response.json();

                const tableBody = $('#user-table tbody');
                tableBody.empty();

                users.forEach(user => {
                    tableBody.append(`
                            <tr>
                                <td><input type="checkbox" value="${user.id}"></td>
                                <td>${user.email}</td>
                            </tr>
                        `);
                });

                $('#user-table').show();
            } catch (error) {
                console.error('Error cargando usuarios:', error);
                alert('No se pudieron cargar los usuarios.');
            }
        };

        document.getElementById('template-public').addEventListener('change', function () {
            if (!this.checked) {
                $('#user-table').show();
                $(document).ready(loadUsers);
            } else {
                $('#user-table').hide();
            }
        });

        Dropzone.options.profilePictureDropzone = {
            url: '/api/Template/UploadFile',
            paramName: "file", // Nombre del parámetro en la solicitud
            maxFilesize: 5, // Tamaño máximo en MB
            acceptedFiles: "image/*", // Tipos de archivos permitidos
            success: function (file, response) {
                if (response.success) {
                    uploadedImageUrl = response.filePath; // Guardar la URL de la imagen
                } else {
                    alert("Error al cargar la imagen: " + response.message);
                }
            },
            error: function (file, errorMessage) {
                console.error("Error al cargar la imagen:", errorMessage);
                alert("Hubo un problema al cargar la imagen.");
            }
        };
    </script>
    <script type="text/javascript" src="~/js/Template/Index.js"></script>
    <script>
        const inputs = document.querySelectorAll(".input");
        function addcl() {
            let parent = this.parentNode.parentNode;
            parent.classList.add("focus");
        }
        function remcl() {
            let parent = this.parentNode.parentNode;
            if (this.value == "") {
                parent.classList.remove("focus");
            }
        }
        inputs.forEach(input => {
            input.addEventListener("focus", addcl);
            input.addEventListener("blur", remcl);
        });
    </script>
</body>
</html>


